// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: posts.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :execresult
INSERT INTO posts (
    id, content, visibility, user_id
) VALUES (
    ?, ?, ?, ?
)
`

type CreatePostParams struct {
	ID         string
	Content    string
	Visibility string
	UserID     string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Content,
		arg.Visibility,
		arg.UserID,
	)
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts 
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, content, visibility, user_id FROM posts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Visibility,
		&i.UserID,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, content, visibility, user_id FROM posts
LIMIT ? OFFSET ?
`

type ListPostsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Visibility,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUser = `-- name: ListPostsByUser :many
SELECT id, content, visibility, user_id FROM posts
WHERE user_id = ?
LIMIT ? OFFSET ?
`

type ListPostsByUserParams struct {
	UserID string
	Limit  int32
	Offset int32
}

func (q *Queries) ListPostsByUser(ctx context.Context, arg ListPostsByUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPostsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Visibility,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :execresult
UPDATE posts
SET content = ?, visibility = ?
WHERE id = ?
`

type UpdatePostParams struct {
	Content    string
	Visibility string
	ID         string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePost, arg.Content, arg.Visibility, arg.ID)
}
